generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Order {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  name                 String?
  surname              String?
  email                String?   @unique
  phone                String?
  age                  Int?
  course               String?
  course_format        String?
  course_type          String?
  sum                  Int?
  already_paid         Int?
  created_at           String?
  utm                  String?
  msg                  String?
  status               String?
  manager              User?     @relation(fields: [managerId], references: [id])
  managerId            String?   @db.ObjectId
  groupFromProgramming Group?    @relation(fields: [group], references: [name])
  group                String?
  comments             Comment[]

  @@map(name: "orders")
}

model Comment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  text       String
  author     String
  Order      Order?   @relation(fields: [orderId], references: [id])
  orderId    String?  @db.ObjectId
  created_at DateTime

  @@map(name: "comments")
}

model Group {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String  @unique
  Order Order[]

  @@map(name: "groups")
}

model User {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  surname    String
  email      String    @unique
  password   String?
  role       String    @default("manager")
  status     String?   @default("unbanned")
  is_active  Boolean?  @default(false)
  last_login DateTime?
  Order      Order[]
  Token      Token[]
  Action     Action[]

  @@map(name: "users")
}

model Token {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  accessToken  String
  refreshToken String
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime

  @@map(name: "tokens")
}

model Action {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  actionToken String
  tokenType   String
  userId      String @db.ObjectId
  user        User   @relation(fields: [userId], references: [id])

  @@map(name: "action_tokens")
}
